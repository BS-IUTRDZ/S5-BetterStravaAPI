name: Java CI with Maven

# Définition des conditions de déclenchement du workflow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Définition des variables d'environnement pour que le workflow puisse
# publier l'image Docker sur le registre GitHub
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# On définit les étapes du job pour créer l'image Docker et la publier
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # 1. On récupère le code source (git pull)
    - uses: actions/checkout@v3

    # 2. On configure Java sur le runner
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # 3. On démarre les services nécessaires pour les tests de l'application
    - name: Start Docker
      run: docker-compose -f "docker-compose.yml" up -d --build

    # 4. On construit l'application Java avec Maven (lancement automatique des tests)
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # 5. On publie l'artefact JAR sur GitHub
    - name: Upload a jar artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        name: "BetterStrava API"
        path: target/*.jar

    # 6. On se connecte au registre Docker de GitHub
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 7. On extrait les métadonnées de l'image Docker
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # 8. On construit l'image Docker et on la publie avec les tags et labels extraits
    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # 9. Nettoyage (arrêt des services Docker)
    - name: Stop Docker
      if: always()
      run: docker-compose down



