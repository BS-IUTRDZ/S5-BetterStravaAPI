name: SonarCloud

# Définition des conditions de déclenchement du workflow
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

# On définit les étapes du job pour tester l'app et publier les résultats sur SonarCloud
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      # 1. On récupère le code source (git pull)
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # 2. On configure Java sur le runner
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      # 3. et 4. On mets en cache les dépendances sonarcloud et maven pour accélérer les futurs builds
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 5. On démarre les services nécessaires pour les tests de l'application
      - name: Start Docker
        run: docker-compose up -d mongodb mysql

      # 6. On lance les tests avec la génération de report Checkstyle et Spotbugs
      - name: Checkstyle and Spotbugs
        run: mvn clean test checkstyle:checkstyle com.github.spotbugs:spotbugs-maven-plugin:spotbugs

      # 7. On envoie les résultats Checkstyle et Spotbugs sur SonarCloud
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=BS-IUTRDZ_S5-BetterStravaAPI

      # 8. Nettoyage (arrêt des services Docker)
      - name: Stop Docker
        if: always()
        run: docker-compose down
